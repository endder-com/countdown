{"version":3,"sources":["logo.svg","pages/Countdown.js","App.js","reportWebVitals.js","index.js"],"names":["Countdown","props","timer","useState","jsonData","setJsonData","remainingTime","setRemainingTime","useEffect","fetch","then","response","json","data","clearInterval","generateTime","duration","moment","countdownDate","diff","console","log","setInterval","days","Math","floor","asDays","hours","String","padStart","minutes","seconds","humanize","intervalInSec","className","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"0NAAe,I,2CC+JAA,EA3JG,SAACC,GACf,IAOIC,EAPJ,EAAgCC,qBAAhC,mBAAOC,EAAP,KAAiBC,EAAjB,KAMA,EAA0CF,mBAAS,IAAnD,mBAAOG,EAAP,KAAsBC,EAAtB,KAkCAC,qBAAU,WACN,IAAIJ,EASI,OANJK,MAA+B,kBAC1BC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GACFR,EAAYQ,MAGT,kBAAMC,cAAcZ,IAR/Ba,MAUL,CAACX,IAEJ,IAAMW,EAAe,WAcjB,IAAIC,EAAWC,IAAOb,EAASc,eAAeC,KAAKF,OACnDG,QAAQC,IAAIL,GACZd,EAAQoB,aAAY,WAUhBN,EAAWC,IAAOD,SAASA,EAAW,IAAM,gBAC5CT,EAAiB,CACbgB,KAAMC,KAAKC,MAAMT,EAASU,UAC1BC,MAAOC,OAAOZ,EAASW,SAASE,SAAS,EAAG,KAC5CC,QAASF,OAAOZ,EAASc,WAAWD,SAAS,EAAG,KAChDE,QAASH,OAAOZ,EAASe,WAAWF,SAAS,EAAG,KAChDG,SAAUhB,EAASgB,UAAS,OAEjC5B,EAAS6B,gBAgChB,OACI,8BACK7B,GAAa,sBAAK8B,UAAU,iBAAf,UAGV,qBAAIA,UAAU,aAAd,2BAA0C9B,EAASc,iBAEnD,sBAAKgB,UAAU,kBAAf,UACK5B,EAAciB,KAAO,GAClB,sBAAKW,UAAU,iBAAf,UACI,qBAAKA,UAAU,WAAf,SAA2B5B,EAAciB,OACzC,qBAAKW,UAAU,YAAf,qBAGR,sBAAKA,UAAU,kBAAf,UACI,qBAAKA,UAAU,YAAf,SAA4B5B,EAAcqB,QAC1C,qBAAKO,UAAU,aAAf,sBAEJ,sBAAKA,UAAU,oBAAf,UACI,qBAAKA,UAAU,cAAf,SAA8B5B,EAAcwB,UAC5C,qBAAKI,UAAU,eAAf,wBAEJ,sBAAKA,UAAU,oBAAf,UACI,qBAAKA,UAAU,cAAf,SAA8B5B,EAAcyB,UAC5C,qBAAKG,UAAU,eAAf,2BAGR,oBAAGA,UAAU,eAAb,qBAAqC5B,EAAc0B,kBC9HpDG,MAtBf,WACE,OACE,qBAAKD,UAAU,MAAf,SACE,wBAAQA,UAAU,aAAlB,SACE,cAAC,EAAD,SCIOE,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqB5B,MAAK,YAAkD,IAA/C6B,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.fddf317d.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import react, { useEffect, useState } from \"react\";\r\nimport './Countdown.css';\r\nimport moment from 'moment';\r\n\r\nconst Countdown = (props) => {\r\n    const [jsonData, setJsonData] = useState(\r\n        //     {\r\n        //     \"countdownDate\": \"2022-01-01\",\r\n        //     \"intervalInSec\": 1000\r\n        // }\r\n    );\r\n    const [remainingTime, setRemainingTime] = useState({});\r\n    let timer;\r\n\r\n\r\n    // let ocassionDateTime = moment('2022-01-01');\r\n    // let ocassionDateTimeHumanize = moment('2022-01-01');\r\n    // var duration = ocassionDateTime.diff(moment());\r\n    // let interval = 1000;\r\n    // console.log(ocassionDateTime);\r\n\r\n    // useEffect(() => {\r\n    //     return () => clearInterval(timer);\r\n    // }, []);\r\n\r\n    // useEffect(() => {\r\n    //     // clearInterval(timer);\r\n    //     fetch(process.env.PUBLIC_URL + 'countdown.json')\r\n    //         .then(response => response.json())\r\n    //         .then(data => {\r\n    //             setJsonData(data);\r\n    //             generateTime();\r\n    //             // console.log(jsonData);\r\n\r\n    //         })\r\n    //     // return () => clearInterval(timer);\r\n    // }, [])\r\n\r\n    // useEffect(() => {\r\n    //     setJsonData({\r\n    //         \"countdownDate\": \"2022-01-01\",\r\n    //         \"intervalInSec\": 1000\r\n    //     })\r\n    // }, []);\r\n\r\n    useEffect(() => {\r\n        if (jsonData) {\r\n            generateTime();\r\n        } else {\r\n            fetch(process.env.PUBLIC_URL + 'countdown.json')\r\n                .then(response => response.json())\r\n                .then(data => {\r\n                    setJsonData(data);\r\n                    // generateTime();\r\n                })\r\n                return () => clearInterval(timer);\r\n        }\r\n    }, [jsonData])\r\n\r\n    const generateTime = () => {\r\n        // if (!jsonData) {\r\n        //     setJsonData({\r\n        //         \"countdownDate\": \"2022-01-01\",\r\n        //         \"intervalInSec\": 1000\r\n        //     })\r\n        // }\r\n\r\n        // let ocassionDateTime = new Date(this.ocassionDateTime);\r\n\r\n        // let ocassionDateTime = moment('2022-01-01');\r\n        // let ocassionDateTimeHumanize = moment('2022-01-01');\r\n        // var duration = ocassionDateTime.diff(moment());\r\n        // console.log({ jsonData });\r\n        let duration = moment(jsonData.countdownDate).diff(moment());\r\n        console.log(duration);\r\n        timer = setInterval(() => {\r\n            // this.duration = moment.duration(this.duration - 1000, 'milliseconds');\r\n            // this.days = Math.floor(this.duration.asDays());\r\n            // this.hours  = this.duration.hours();\r\n            // this.hours = String(this.hours).padStart(2, \"0\");\r\n            // this.minutes  = this.duration.minutes();\r\n            // this.minutes = String(this.minutes).padStart(2, \"0\");\r\n            // this.seconds  = this.duration.seconds();\r\n            // this.seconds = String(this.seconds).padStart(2, \"0\");\r\n\r\n            duration = moment.duration(duration - 1000, 'milliseconds');\r\n            setRemainingTime({\r\n                days: Math.floor(duration.asDays()),\r\n                hours: String(duration.hours()).padStart(2, \"0\"),\r\n                minutes: String(duration.minutes()).padStart(2, \"0\"),\r\n                seconds: String(duration.seconds()).padStart(2, \"0\"),\r\n                humanize: duration.humanize(true)\r\n            });\r\n        }, jsonData.intervalInSec);\r\n        // console.log({jsonData}, {remainingTime}, {duration});\r\n    }\r\n\r\n\r\n    //     useEffect(() => {\r\n    //             setJsonData({\r\n    //                 \"countdownDate\": \"2022-01-01\",\r\n    //                 \"intervalInSec\": 1000\r\n    //             })\r\n\r\n    //         // let ocassionDateTime = new Date(this.ocassionDateTime);\r\n\r\n    //         // let ocassionDateTime = moment('2022-01-01');\r\n    //         // let ocassionDateTimeHumanize = moment('2022-01-01');\r\n    //         // var duration = ocassionDateTime.diff(moment());\r\n    //         console.log({jsonData});\r\n    //         let duration = moment(jsonData.countdownDate).diff(moment());\r\n    //         console.log(duration);\r\n    //         timer = setInterval(() => {\r\n    //             duration = moment.duration(duration - 1000, 'milliseconds');\r\n    //             setRemainingTime({\r\n    //                 days: Math.floor(duration.asDays()),\r\n    //                 hours: String(duration.hours()).padStart(2, \"0\"),\r\n    //                 minutes: String(duration.minutes()).padStart(2, \"0\"),\r\n    //                 seconds: String(duration.seconds()).padStart(2, \"0\"),\r\n    //                 humanize: duration.humanize(true)\r\n    //             });\r\n    //         }, jsonData.intervalInSec);\r\n    //     }, []);\r\n\r\n\r\n    return (\r\n        <div>\r\n            {jsonData && (<div className=\"page-container\">\r\n                {/* <p className=\"page-title\">Countdown till {ocassionDateTime.toString()}</p> */}\r\n                {/* <p className=\"page-title\">Countdown for {remainingTime.humanize}</p> */}\r\n                <h1 className=\"page-title\">Countdown for {jsonData.countdownDate}</h1>\r\n\r\n                <div className=\"timer-container\">\r\n                    {remainingTime.days > 0 && (\r\n                        <div className=\"days-container\">\r\n                            <div className=\"days-num\">{remainingTime.days}</div>\r\n                            <div className=\"days-text\">days</div>\r\n                        </div>\r\n                    )}\r\n                    <div className=\"hours-container\">\r\n                        <div className=\"hours-num\">{remainingTime.hours}</div>\r\n                        <div className=\"hours-text\">hours</div>\r\n                    </div>\r\n                    <div className=\"minutes-container\">\r\n                        <div className=\"minutes-num\">{remainingTime.minutes}</div>\r\n                        <div className=\"minutes-text\">minutes</div>\r\n                    </div>\r\n                    <div className=\"seconds-container\">\r\n                        <div className=\"seconds-num\">{remainingTime.seconds}</div>\r\n                        <div className=\"seconds-text\">seconds</div>\r\n                    </div>\r\n                </div>\r\n                <p className=\"roughly-text\">Roughly {remainingTime.humanize}</p>\r\n            </div>\r\n            )}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Countdown;","import logo from './logo.svg';\nimport './App.css';\nimport Countdown from './pages/Countdown';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <Countdown></Countdown>\n        {/* <img src={logo} className=\"App-logo\" alt=\"logo\" />\n        <p>\n          Edit <code>src/App.js</code> and save to reload.\n        </p>\n        <a\n          className=\"App-link\"\n          href=\"https://reactjs.org\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          Learn React\n        </a> */}\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}